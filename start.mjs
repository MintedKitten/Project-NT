import E from"./node_modules/next/dist/server/next.js";import R from"./node_modules/express/index.js";import{MongoClient as Y}from"./node_modules/mongodb/lib/index.js";import{ObjectId as _}from"./node_modules/bson/lib/bson.js";import L from"./node_modules/formidable/src/index.js";import{createReadStream as B,createWriteStream as D,existsSync as b,mkdirSync as G}from"fs";import{createHash as W}from"crypto";import{getToken as N}from"./node_modules/next-auth/jwt/index.js";import{Search as Z,Add as Me,Home as Fe}from"./node_modules/@mui/icons-material/index.js";import T from"./node_modules/dayjs/dayjs.min.js";import $ from"./node_modules/dayjs/plugin/buddhistEra.js";import"./node_modules/dayjs/locale/th.js";T.extend($);var S=[{label:"All",value:"All"},{label:"3 Months",value:"3 Months"},{label:"Past",value:"Past"},{label:"Custom",value:"Custom"}],Ne=S.map(n=>n.value)[0];function v(n){let e=Number(n),t=parseInt(n);if(e>Number.MAX_SAFE_INTEGER)throw new Error("Error: input is more than MAX_SAFE_INTEGER");if(e!==t)throw new Error("Error: input is not an Integer");if(isNaN(e))throw new Error("Error: input is not an Integer");if(!Number.isInteger(e))throw new Error("Error: input is not an Integer");return e}function X(n){let e=new TextEncoder().encode(n),t=W("sha256").update(e).digest();return Array.from(new Uint8Array(t)).map(i=>i.toString(16).padStart(2,"0")).join("")}var j=v(`${process.env.PORT}`)||3e3,A=process.env.NODE_ENV!=="production",C=E({dev:A}),q=C.getRequestHandler(),y=A?"devProcurement":"Procurement",M="FilesMetadata",h;async function x(){return h||(h=new Y(process.env.EXPRESS_MONGO_STRING+"")),await h.connect()}function z(n){return"originalFilename"in n}function J(n){return"length"in n}async function K(n){return await(await x()).db(y).collection(M).findOne({_id:n},{projection:{filename:1,dir:1}})}async function U(n){let e=await x(),t=await e.db(y).collection(M).insertOne(n).then(r=>r.insertedId);return await e.close(),t}async function V(n,e){let t=await x(),r=await t.db(y).collection(M).updateOne({_id:n},{$set:{dir:e.dir}}).then(s=>s.upsertedId);return await t.close(),r}function I(n=""){let e=n.split("; "),t={};return e.forEach(r=>{let s=r.indexOf("="),i=r.substring(0,s),c=r.substring(s+1);t[i]=decodeURIComponent(c)}),t}var w="./files/";C.prepare().then(()=>{let n=R();n.get("/files/:fmid",async(e,t,r)=>{if(e.cookies=I(e.headers.cookie),!await N({req:e,secret:`${process.env.JWT_SECRET}`}))return t.status(401).end();try{let i=await K(new _(e.params.fmid));if(i){let{filename:c,dir:o}=i;if(!o||o&&!b(o))return t.status(404).end("Can't find that file, sorry!");console.log(`File downloading: ${c}
At: ${o}`),t.download(`${o}`,`${c}`,function(d){return d?(console.log(`Error downloading: ${d}`),r(d)):(console.log(`Successfully downloaded: ${c}`),t.status(200).end())})}else return t.status(404).end("Can't find that file, sorry!")}catch(i){return console.log(i),t.status(500).end("Something went wrong.")}}).post("/files/",async(e,t,r)=>{if(e.cookies=I(e.headers.cookie),!await N({req:e,secret:`${process.env.JWT_SECRET}`}))return t.status(401).end();let i=L(),c=new Promise((o,d)=>{i.parse(e,(l,m,a)=>{l&&d(l),o({fields:m,files:a})})});b(w)||G(w),await c.then(o=>{let{fields:d,files:l}=o,m=[];if(z(l.file)?m[0]=l.file:J(l.file)&&(m=l.file),m.length<1)throw new Error("Can't find any files");m.forEach(async a=>{let F=a.originalFilename?.lastIndexOf("."),k=a.originalFilename?.substring(F?F+1:0),f=await U({filename:a.originalFilename?a.originalFilename:"",filetype:k||"",contentType:a.mimetype?a.mimetype:"",size:a.size,uploadDate:new Date}),p=w+X(f.toHexString());return await new Promise((u,H)=>{let O=B(a.filepath),g=D(p);g.on("error",P=>{H(P)}),g.on("finish",()=>{u()}),O.pipe(g)}).catch(u=>{throw new Error(u)}),await V(f,{dir:p}),console.log(`New file uploaded at: ${p}`),console.log("fmid: "+f.toHexString()),t.status(201).json({data:{fmid:f.toHexString()}})})}).catch(o=>(console.log(o),t.status(500).end(o)))}).all("*",(e,t)=>q(e,t)),n.listen(j,()=>{console.log(`Server started on port ${j}`)})}).catch(n=>{console.error(n),process.exit(1)});
