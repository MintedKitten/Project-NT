import*as E from"./node_modules/dotenv/lib/main.js";import j from"./node_modules/next/dist/server/next.js";import R from"./node_modules/express/index.js";import{MongoClient as H}from"./node_modules/mongodb/lib/index.js";import{ObjectId as _}from"./node_modules/bson/lib/bson.js";import A from"./node_modules/formidable/src/index.js";import{createReadStream as D,createWriteStream as N,existsSync as k,mkdirSync as B}from"fs";import{createHash as W}from"crypto";import{getToken as v}from"./node_modules/next-auth/jwt/index.js";E.config({path:"/.env.local"});function z(n){let t=new TextEncoder().encode(n),e=W("sha256").update(t).digest();return Array.from(new Uint8Array(e)).map(s=>s.toString(16).padStart(2,"0")).join("")}var x=parseInt(`${process.env.PORT}`,10)||3e3,M=process.env.NODE_ENV!=="production",$=j({dev:M}),G=$.getRequestHandler(),y=M?"devProcurement":"Procurement",F="FilesMetadata",h;async function I(){return h||(h=new H(process.env.EXPRESS_MONGO_STRING+"")),await h.connect()}function J(n){return"originalFilename"in n}function U(n){return"length"in n}async function V(n){return await(await I()).db(y).collection(F).findOne({_id:n},{projection:{filename:1,dir:1}})}async function X(n){let t=await I(),e=await t.db(y).collection(F).insertOne(n).then(i=>i.insertedId);return await t.close(),e}async function K(n,t){let e=await I(),i=await e.db(y).collection(F).updateOne({_id:n},{$set:{dir:t.dir}}).then(a=>a.upsertedId);return await e.close(),i}function b(n=""){let t=n.split("; "),e={};return t.forEach(i=>{let a=i.indexOf("="),s=i.substring(0,a),c=i.substring(a+1);e[s]=decodeURIComponent(c)}),e}var w="./files/";$.prepare().then(()=>{let n=R();n.get("/files/:fmid",async(t,e,i)=>{if(t.cookies=b(t.headers.cookie),!await v({req:t,secret:`${process.env.JWT_SECRET}`}))return e.status(401).end();try{let s=await V(new _(t.params.fmid));if(s){let{filename:c,dir:o}=s;if(!o||o&&!k(o))return e.status(404).end("Can't find that file, sorry!");console.log(`File downloading: ${c}
At: ${o}`),e.download(`${o}`,`${c}`,function(d){return d?(console.log(`Error downloading: ${d}`),i(d)):(console.log(`Successfully downloaded: ${c}`),e.status(200).end())})}else return e.status(404).end("Can't find that file, sorry!")}catch(s){return console.log(s),e.status(500).end("Something went wrong.")}}).post("/files/",async(t,e,i)=>{if(t.cookies=b(t.headers.cookie),!await v({req:t,secret:`${process.env.JWT_SECRET}`}))return e.status(401).end();let s=A(),c=new Promise((o,d)=>{s.parse(t,(l,f,r)=>{l&&d(l),o({fields:f,files:r})})});k(w)||B(w),await c.then(o=>{let{fields:d,files:l}=o,f=[];if(J(l.file)?f[0]=l.file:U(l.file)&&(f=l.file),f.length<1)throw new Error("Can't find any files");f.forEach(async r=>{let O=r.originalFilename?.lastIndexOf("."),S=r.originalFilename?.substring(O?O+1:0),u=await X({filename:r.originalFilename?r.originalFilename:"",filetype:S||"",contentType:r.mimetype?r.mimetype:"",size:r.size,uploadDate:new Date}),m=w+z(u.toHexString());return await new Promise((p,C)=>{let P=D(r.filepath),g=N(m);g.on("error",T=>{C(T)}),g.on("finish",()=>{p()}),P.pipe(g)}).catch(p=>{throw new Error(p)}),await K(u,{dir:m}),console.log(`New file uploaded at: ${m}`),console.log("fmid: "+u.toHexString()),e.status(201).json({data:{fmid:u.toHexString()}})})}).catch(o=>(console.log(o),e.status(500).end(o)))}).all("*",(t,e)=>G(t,e)),n.listen(x,()=>{console.log(`Server started on port ${x}`)})}).catch(n=>{console.error(n),process.exit(1)});
