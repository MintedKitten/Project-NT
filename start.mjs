import*as x from"./node_modules/dotenv/lib/main.js";import E from"./node_modules/next/dist/server/next.js";import j from"./node_modules/express/index.js";import{MongoClient as H}from"./node_modules/mongodb/lib/index.js";import{ObjectId as A}from"./node_modules/bson/lib/bson.js";import C from"./node_modules/formidable/src/index.js";import{createReadStream as D,createWriteStream as N,existsSync as R,mkdirSync as _}from"fs";import{createHash as B}from"crypto";x.config({path:"/.env.local"});function T(t){let n=new TextEncoder().encode(t),e=B("sha256").update(n).digest();return Array.from(new Uint8Array(e)).map(s=>s.toString(16).padStart(2,"0")).join("")}var S=parseInt(`${process.env.PORT}`,10)||3e3,M=process.env.NODE_ENV!=="production",b=E({dev:M}),z=b.getRequestHandler(),w=M?"devProcurement":"Procurement",y="FilesMetadata",g;async function F(){return g||(g=new H(process.env.EXPRESS_MONGO_STRING+"")),await g.connect()}function G(t){return"originalFilename"in t}function k(t){return"length"in t}async function q(t){return await(await F()).db(w).collection(y).findOne({_id:t},{projection:{filename:1,dir:1}})}async function U(t){let n=await F(),e=await n.db(w).collection(y).insertOne(t).then(a=>a.insertedId);return await n.close(),e}async function V(t,n){let e=await F(),a=await e.db(w).collection(y).updateOne({_id:t},{$set:{dir:n.dir}}).then(i=>i.upsertedId);return await e.close(),a}var h="./files/";b.prepare().then(()=>{let t=j();t.get("/files/:fmid",async(n,e,a)=>{try{let i=await q(new A(n.params.fmid));if(i){let{filename:s,dir:r}=i;console.log(`File downloading: ${s}
At: ${r}`),e.download(`${r}`,`${s}`,function(c){return c?(console.log(`Error downloading: ${c}`),a(c)):(console.log(`Successfully downloaded: ${s}`),e.status(200).end())})}else return e.status(404).end("Can't find that file, sorry!")}catch(i){return console.log(i),e.status(500).end("Something went wrong.")}}).post("/files/",async(n,e,a)=>{let i=C(),s=new Promise((r,c)=>{i.parse(n,(l,d,o)=>{l&&c(l),r({fields:d,files:o})})});R(h)||_(h),await s.then(r=>{let{fields:c,files:l}=r,d=[];if(G(l.file)?d[0]=l.file:k(l.file)&&(d=l.file),d.length<1)throw new Error("Can't find any files");d.forEach(async o=>{let I=o.originalFilename?.lastIndexOf("."),O=o.originalFilename?.substring(I?I+1:0),f=await U({filename:o.originalFilename?o.originalFilename:"",filetype:O||"",contentType:o.mimetype?o.mimetype:"",size:o.size,uploadDate:new Date}),m=h+T(f.toHexString());return await new Promise((u,v)=>{let P=D(o.filepath),p=N(m);p.on("error",$=>{v($)}),p.on("finish",()=>{u()}),P.pipe(p)}).catch(u=>{throw new Error(u)}),await V(f,{dir:m}),console.log(`New file uploaded at: ${m}`),console.log("fmid: "+f.toHexString()),e.status(201).json({data:{fmid:f.toHexString()}})})}).catch(r=>(console.log(r),e.status(500).end(r)))}).all("*",(n,e)=>z(n,e)),t.listen(S,()=>{console.log(`Server started on port ${S}`)})}).catch(t=>{console.error(t),process.exit(1)});
